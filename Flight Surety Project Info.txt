Flight Surety Project

Project Requirements
There are five main requirements for the project:
	•	Separation of Concerns
	•	Airlines
	•	Passengers
	•	Oracles
	•	General
	•	
	 



https://review.udacity.com/#!/rubrics/1711/view

https://study-hall.udacity.com/rooms/community:nd1309:562321-project-564?contextType=room

https://github.com/msharekh/Project7-Flight-Surety

https://github.com/udacity/FlightSurety

https://udacity.github.io/git-styleguide/

https://classroom.udacity.com/nanodegrees/nd1309/parts/88562bea-c040-4082-b298-27362bd9da6d/modules/cf5df7f2-be4f-476e-979c-887027618490/lessons/13e85032-a45e-4213-b493-77b9814e9acc/concepts/44eae17d-bdab-4895-a8b9-236c9f38c381



npm list --depth 0

truffle compile

	npm install 
	truffle compile

Develop Client
To run truffle tests:

truffle test ./test/flightSurety.js 
truffle test ./test/oracles.js

To use the dapp:

truffle migrate 
npm run dapp

To view dapp:

http://localhost:8000

Develop Server
npm run server 
truffle test ./test/oracles.js

Deploy
To build dapp for prod: npm run dapp:prod

Deploy the contents of the ./dapp folder


==================

├── @babel/cli@7.4.3
├── @babel/core@7.4.3
├── @babel/plugin-proposal-class-properties@7.4.0
├── @babel/plugin-proposal-object-rest-spread@7.4.3
├── @babel/preset-env@7.4.3
├── babel-core@6.26.3
├── babel-loader@8.0.5
├── babel-polyfill@6.26.0
├── babel-preset-es2015@6.24.1
├── babel-preset-stage-0@6.24.1
├── bignumber.js@8.0.2
├── css-loader@1.0.1
├── express@4.16.4
├── file-loader@3.0.1
├── html-loader@0.5.5
├── html-webpack-plugin@3.2.0
├── openzeppelin-solidity@1.12.0
├── start-server-webpack-plugin@2.2.5
├── style-loader@0.23.1
├── superstatic@6.0.3
├── truffle@5.0.2
├── truffle-hdwallet-provider@1.0.2
├── web3@1.0.0-beta.37
├── webpack@4.30.0
├── webpack-cli@3.3.1
├── webpack-dev-server@3.3.1
└── webpack-node-externals@1.7.2

===================
PROJECT SPECIFICATION:

Smart Contract Seperation

	Smart Contract code is separated into multiple contracts:

	1) FlightSuretyData.sol for data persistence
	2) FlightSuretyApp.sol for app logic and oracles code

Dapp Created and Used for Contract Calls

	A Dapp client has been created and is used for triggering contract calls. Client can be launched with “npm run dapp” and is available at http://localhost:8000

	Specific contract calls:

	1) Passenger can purchase insurance for flight
	2) Trigger contract to request flight status update


Oracle Server Application

	A server app has been created for simulating oracle behavior. Server can be launched with “npm run server”

Operational status control is implemented in contracts

	Students has implemented operational status control.

Fail Fast Contract

	Contract functions “fail fast” by having a majority of “require()” calls at the beginning of function body

	_______________________

	 UTILITY FUNCTIONS            :
	 function isOperational() 
                            public 
                            pure 
                            returns(bool) 

	SMART CONTRACT FUNCTIONS	  :
	1-function registerAirline
                            (   
                            )
                            external
                            pure
                            returns(bool success, uint256 votes)
	
	2-function registerFlight
                                (
                                )
                                external
                                pure

	3-function processFlightStatus
                                (
                                    address airline,
                                    string memory flight,
                                    uint256 timestamp,
                                    uint8 statusCode
                                )
                                internal
                                pure

	4-function fetchFlightStatus
                        (
                            address airline,
                            string flight,
                            uint256 timestamp                            
                        )
                        external

	5-function registerOracle
                            (
                            )
                            external
                            payable

	
	flightSuretyData:
	methods:
      { 'isOperational()': [Function],
        'setOperatingStatus(bool)': [Function],
        'authorizeCaller(address)': [Function],
        'registerAirline()': [Function],
        'buy()': [Function],
        'creditInsurees()': [Function],
        'pay()': [Function],
        'fund()': [Function] },


	flightSuretyApp:
	methods:
      { 'REGISTRATION_FEE()': [Function],
        'isOperational()': [Function],
        'registerAirline()': [Function],
        'registerFlight()': [Function],
        'fetchFlightStatus(address,string,uint256)': [Function],
        'registerOracle()': [Function],
        'getMyIndexes()': [Function],
        'submitOracleResponse(uint8,address,string,uint256,uint8)': [Function] },


		+++++++++++++++++++++++++++++
		important notes:

		FlightSuretyData must contain an AuthorizeCaller function
		I advise you reviewing the Chapter 6 (Advanced Blockchain Concepts) -> Lesson 4 (Smart contract upgradability) -> All the concepts

		The same for the Oracles, Lesson 5 reference them, and walk you through regarding implementing some essential functions and upgrade the tests